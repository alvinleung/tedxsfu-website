import { schedule } from "@netlify/functions";
import { JWT } from "google-auth-library";
import { GoogleSpreadsheet } from "google-spreadsheet";
import puppeteer, { Puppeteer } from "puppeteer";

// To learn about scheduled functions and supported cron extensions,
// see: https://ntl.fyi/sched-func
export const handler = schedule("@minute", async (event) => {
  const eventBody = JSON.parse(event.body as any);
  console.log(`Next function run at ${eventBody.next_run}.`);

  (async () => {
    // Launch the browser and open a new blank page
    const browser = await puppeteer.launch();
    const page = await browser.newPage();

    // Navigate the page to a URL
    await page.goto("https://www.ticketmaster.ca/event/11005F2D0FDD4B2A");

    // Set screen size
    await page.setViewport({ width: 1080, height: 1024 });

    const allSeats = (await page.$$(".seat")).length;
    const availableSeat = (await page.$$(".is-available")).length;
    const soldSeats = allSeats - availableSeat - 18;

    console.log(`The number of seats sold ${soldSeats}`);

    await browser.close();
  })();

  return {
    statusCode: 200,
  };
});

async function addToGoogleSheet() {
  // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
  const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: process.env.GOOGLE_PRIVATE_KEY,
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
  });

  const doc = new GoogleSpreadsheet(
    "<the sheet ID from the url>",
    serviceAccountAuth,
  );

  await doc.loadInfo(); // loads document properties and worksheets
  console.log(doc.title);
  await doc.updateProperties({ title: "renamed doc" });

  const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
  console.log(sheet.title);
  console.log(sheet.rowCount);

  // adding / removing sheets
  const newSheet = await doc.addSheet({ title: "another sheet" });
  await newSheet.delete();
}
